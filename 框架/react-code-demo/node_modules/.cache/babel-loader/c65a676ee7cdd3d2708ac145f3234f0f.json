{"ast":null,"code":"var _jsxFileName = \"/Users/xuanqiyan/Desktop/\\u9762\\u8BD5\\u9636\\u6BB5/\\u9762\\u8BD5\\u9898/\\u6846\\u67B6/react-code-demo/src/components/advancedUse/ContextDemo.js\";\nimport React from 'react'; // 创建 Context 填入默认值（任何一个 js 变量）\n\nconst ThemeContext = React.createContext('light'); // 底层组件 - 函数是组件\n\nfunction ThemeLink(props) {\n  // const theme = this.context // 会报错。函数式组件没有实例，即没有 this\n  // 函数式组件使用 Consumer\n  return React.createElement(ThemeContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, value => React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"link's theme is \", value));\n} // 底层组件 - class 组件\n\n\nclass ThemedButton extends React.Component {\n  // 指定 contextType 读取当前的 theme context。\n  // static contextType = ThemeContext // 也可以用 ThemedButton.contextType = ThemeContext\n  render() {\n    const theme = this.context; // React 会往上找到最近的 theme Provider，然后使用它的值。\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"button's theme is \", theme));\n  }\n\n}\n\nThemedButton.contextType = ThemeContext; // 指定 contextType 读取当前的 theme context。\n// 中间的组件再也不必指明往下传递 theme 了。\n\nfunction Toolbar(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(ThemedButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(ThemeLink, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeTheme = () => {\n      this.setState({\n        theme: this.state.theme === 'light' ? 'dark' : 'light'\n      });\n    };\n\n    this.state = {\n      theme: 'light'\n    };\n  }\n\n  render() {\n    return React.createElement(ThemeContext.Provider, {\n      value: this.state.theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.changeTheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"change theme\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/xuanqiyan/Desktop/面试阶段/面试题/框架/react-code-demo/src/components/advancedUse/ContextDemo.js"],"names":["React","ThemeContext","createContext","ThemeLink","props","value","ThemedButton","Component","render","theme","context","contextType","Toolbar","App","constructor","changeTheme","setState","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,YAAY,GAAGD,KAAK,CAACE,aAAN,CAAoB,OAApB,CAArB,C,CAEA;;AACA,SAASC,SAAT,CAAoBC,KAApB,EAA2B;AACvB;AAEA;AACA,SAAO,oBAAC,YAAD,CAAc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACDC,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAoBA,KAApB,CADR,CAAP;AAGH,C,CAED;;;AACA,MAAMC,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CAA2C;AACvC;AACA;AACAC,EAAAA,MAAM,GAAG;AACL,UAAMC,KAAK,GAAG,KAAKC,OAAnB,CADK,CACsB;;AAC3B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAsBD,KAAtB,CADG,CAAP;AAGH;;AARsC;;AAU3CH,YAAY,CAACK,WAAb,GAA2BV,YAA3B,C,CAAwC;AAExC;;AACA,SAASW,OAAT,CAAiBR,KAAjB,EAAwB;AACpB,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;;AAED,MAAMS,GAAN,SAAkBb,KAAK,CAACO,SAAxB,CAAkC;AAC9BO,EAAAA,WAAW,CAACV,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAanBW,WAbmB,GAaL,MAAM;AAChB,WAAKC,QAAL,CAAc;AACVP,QAAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWR,KAAX,KAAqB,OAArB,GAA+B,MAA/B,GAAwC;AADrC,OAAd;AAGH,KAjBkB;;AAEf,SAAKQ,KAAL,GAAa;AACTR,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AACDD,EAAAA,MAAM,GAAG;AACL,WAAO,oBAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAE,KAAKS,KAAL,CAAWR,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACH,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADG,EAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFG,EAGH;AAAQ,MAAA,OAAO,EAAE,KAAKM,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHG,CAAP;AAKH;;AAb6B;;AAqBlC,eAAeF,GAAf","sourcesContent":["import React from 'react'\n\n// 创建 Context 填入默认值（任何一个 js 变量）\nconst ThemeContext = React.createContext('light')\n\n// 底层组件 - 函数是组件\nfunction ThemeLink (props) {\n    // const theme = this.context // 会报错。函数式组件没有实例，即没有 this\n\n    // 函数式组件使用 Consumer\n    return <ThemeContext.Consumer>\n        { value => <p>link's theme is {value}</p> }\n    </ThemeContext.Consumer>\n}\n\n// 底层组件 - class 组件\nclass ThemedButton extends React.Component {\n    // 指定 contextType 读取当前的 theme context。\n    // static contextType = ThemeContext // 也可以用 ThemedButton.contextType = ThemeContext\n    render() {\n        const theme = this.context // React 会往上找到最近的 theme Provider，然后使用它的值。\n        return <div>\n            <p>button's theme is {theme}</p>\n        </div>\n    }\n}\nThemedButton.contextType = ThemeContext // 指定 contextType 读取当前的 theme context。\n\n// 中间的组件再也不必指明往下传递 theme 了。\nfunction Toolbar(props) {\n    return (\n        <div>\n            <ThemedButton />\n            <ThemeLink />\n        </div>\n    )\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            theme: 'light'\n        }\n    }\n    render() {\n        return <ThemeContext.Provider value={this.state.theme}>\n            <Toolbar />\n            <hr/>\n            <button onClick={this.changeTheme}>change theme</button>\n        </ThemeContext.Provider>\n    }\n    changeTheme = () => {\n        this.setState({\n            theme: this.state.theme === 'light' ? 'dark' : 'light'\n        })\n    }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
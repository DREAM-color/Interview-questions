{"ast":null,"code":"var _jsxFileName = \"/Users/xuanqiyan/Desktop/\\u9762\\u8BD5\\u9636\\u6BB5/\\u9762\\u8BD5\\u9898/\\u6846\\u67B6/react-code-demo/src/components/baseUse/JSXBaseDemo.js\";\nimport React from 'react';\nimport './style.css';\nimport List from '../List';\n\nclass JSXBaseDemo extends React.Component {\n  constructor(props) {\n    super(); //调用父组件的构造函数\n\n    this.state = {\n      name: 'xuanqiYan',\n      imgUrl: 'http://baidu.com',\n      flag: true,\n      list: [{\n        id: 1,\n        content: 'xxx'\n      }, {\n        id: 2,\n        content: 'ooo'\n      }]\n    };\n  }\n\n  render() {\n    // 循环\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, this.state.list.map(item => {\n      return React.createElement(\"li\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, item.content);\n    })); //  获取变量 插值\n    //const elm =  <p>{this.state.name}</p>\n    //return elm\n    // 表达式\n    //const exprElem = <p>{this.state.flag ? 'yes' : 'no'}</p>\n    //return exprElem\n    // 子元素 模板必须要又一个根节点\n    //      const imgElem = (\n    // \t<div>\n    // \t\t<p>我的头像</p>\n    // \t\t<img src=\"xxxx.png\"/>\n    // \t\t<img src={this.state.imgUrl}/>\n    // \t</div>\n    // )\n    //      return imgElem\n    // class\n    // const classElem = <p className=\"title\">设置 css class</p>\n    // return classElem\n    // // style\n    //const styleData = { fontSize: '30px',  color: 'blue' }\n    //const styleElem = <p style={styleData}>设置 style</p>\n    // 内联写法，注意 {{ 和 }}\n    // const styleElem = <p style={{ fontSize: '30px',  color: 'blue' }}>设置 style</p>\n    //return styleElem\n    //原生 html\n    //const rawHtml = '<span>富文本内容<i>斜体</i><b>加粗</b></span><Script>console.log(\"XSS attack available!\")</Script>'\n    // const rawHtmlData = {\n    //     __html: rawHtml // 注意，必须是这种格式\n    // }\n    //v-html v-text\n    //       const rawHtmlElem = (\n    // \t\t<div>\n    // \t\t\t<p dangerouslySetInnerHTML={{__html:rawHtml}}></p>\n    // \t\t\t<p>{rawHtml}</p>\n    // \t\t</div>\n    // )\n    //       return rawHtmlElem\n    // 加载组件\n    // const componentElem = <div>\n    //     <p>JSX 中加载一个组件</p>\n    //     <hr/>\n    //     <List/>\n    // </div>\n    // return componentElem\n  }\n\n}\n\nexport default JSXBaseDemo;","map":{"version":3,"sources":["/Users/xuanqiyan/Desktop/面试阶段/面试题/框架/react-code-demo/src/components/baseUse/JSXBaseDemo.js"],"names":["React","List","JSXBaseDemo","Component","constructor","props","state","name","imgUrl","flag","list","id","content","render","map","item"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACrB,YADqB,CACd;;AACD,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,WADG;AAETC,MAAAA,MAAM,EAAE,kBAFC;AAGTC,MAAAA,IAAI,EAAE,IAHG;AAIlBC,MAAAA,IAAI,EAAC,CACJ;AAACC,QAAAA,EAAE,EAAC,CAAJ;AAAMC,QAAAA,OAAO,EAAC;AAAd,OADI,EAEJ;AAACD,QAAAA,EAAE,EAAC,CAAJ;AAAMC,QAAAA,OAAO,EAAC;AAAd,OAFI;AAJa,KAAb;AASH;;AACDC,EAAAA,MAAM,GAAG;AACX;AACA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,KAAKP,KAAL,CAAWI,IAAX,CAAgBI,GAAhB,CAAqBC,IAAI,IAAI;AAC5B,aACE;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACJ,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBI,IAAI,CAACH,OAAxB,CADF;AAGA,KAJD,CAFF,CADD,CAFW,CAcL;AACN;AACM;AAEA;AACA;AACA;AAEA;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEK;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEM;AACA;AACA;AACA;AACA;AACA;AACD;AACF;;AA7EqC;;AAgF1C,eAAeV,WAAf","sourcesContent":["import React from 'react'\nimport './style.css'\nimport List from '../List'\n\nclass JSXBaseDemo extends React.Component {\n    constructor(props) {\n\t\tsuper()//调用父组件的构造函数\n        this.state = {\n            name: 'xuanqiYan',\n            imgUrl: 'http://baidu.com',\n            flag: true,\n\t\t\tlist:[\n\t\t\t\t{id:1,content:'xxx'},\n\t\t\t\t{id:2,content:'ooo'},\n\t\t\t]\n        }\n    }\n    render() {\n\t\t// 循环\n\t\treturn (\n\t\t\t<ul>\t\n\t\t\t\t{\n\t\t\t\t\tthis.state.list.map( item => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={item.id}>{item.content}</li>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</ul>\n\t\t)\t\n\t\t\t\n        //  获取变量 插值\n\t\t//const elm =  <p>{this.state.name}</p>\n        //return elm\n\n        // 表达式\n        //const exprElem = <p>{this.state.flag ? 'yes' : 'no'}</p>\n        //return exprElem\n\n        // 子元素 模板必须要又一个根节点\n   //      const imgElem = (\n\t\t\t// \t<div>\n\t\t\t// \t\t<p>我的头像</p>\n\t\t\t// \t\t<img src=\"xxxx.png\"/>\n\t\t\t// \t\t<img src={this.state.imgUrl}/>\n\t\t\t// \t</div>\n\t\t\t// )\n   //      return imgElem\n\n        // class\n        // const classElem = <p className=\"title\">设置 css class</p>\n        // return classElem\n\n        // // style\n        //const styleData = { fontSize: '30px',  color: 'blue' }\n        //const styleElem = <p style={styleData}>设置 style</p>\n        // 内联写法，注意 {{ 和 }}\n        // const styleElem = <p style={{ fontSize: '30px',  color: 'blue' }}>设置 style</p>\n        //return styleElem\n\n        //原生 html\n        //const rawHtml = '<span>富文本内容<i>斜体</i><b>加粗</b></span><Script>console.log(\"XSS attack available!\")</Script>'\n        // const rawHtmlData = {\n        //     __html: rawHtml // 注意，必须是这种格式\n        // }\n\t\t//v-html v-text\n  //       const rawHtmlElem = (\n\t\t// \t\t<div>\n\t\t// \t\t\t<p dangerouslySetInnerHTML={{__html:rawHtml}}></p>\n\t\t// \t\t\t<p>{rawHtml}</p>\n\t\t// \t\t</div>\n\t\t// )\n  //       return rawHtmlElem\n\n        // 加载组件\n        // const componentElem = <div>\n        //     <p>JSX 中加载一个组件</p>\n        //     <hr/>\n        //     <List/>\n        // </div>\n       // return componentElem\n    }\n}\n\nexport default JSXBaseDemo\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/xuanqiyan/Desktop/\\u9762\\u8BD5\\u9636\\u6BB5/\\u9762\\u8BD5\\u9898/\\u6846\\u67B6/react-code-demo/src/components/baseUse/EventDemo.js\";\nimport React from 'react';\n\nclass EventDemo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clickHandler2 = () => {\n      this.setState({\n        name: 'lisi'\n      });\n    };\n\n    this.clickHandler3 = event => {\n      event.preventDefault(); // 阻止默认行为\n      //event.stopPropagation() // 阻止冒泡\n      //console.log('target', event.target) // 事件在哪个元素上监听的，即当前元素触发\n      //console.log('current target', event.currentTarget) // 事件在哪个元素上触发的 ，假象！！！\n      // 注意:event 其实是 React 封装的, 可以看 __proto__.constructor 是 SyntheticEvent 组合事件\n      //console.log('event', event) // 不是原生的 Event ，原生的 MouseEvent\n\n      console.log('event.__proto__.constructor', event.nativeEvent.__proto__.constructor) // 原生 event 如下: 其 __proto__.constructor 是 MouseEvent\n      / console.log('nativeEvent', event.nativeEvent); // 原始的event对象\n      // console.log('nativeEvent target', event.nativeEvent.target)  //绑定事件的元素\n      // console.log('nativeEvent current target', event.nativeEvent.currentTarget) //触发事件的元素 指向 document ！！！\n      // 1. event 是 SyntheticEvent ，模拟出来 DOM 事件所有能力\n      // 2. event.nativeEvent 是原生事件对象\n      // 3. 所有的事件，都被挂载到 document 上\n      // 4. 和 DOM 事件不一样，和 Vue 事件也不一样\n    };\n\n    this.state = {\n      name: 'zhangsan',\n      list: [{\n        id: 'id-1',\n        title: '标题1'\n      }, {\n        id: 'id-2',\n        title: '标题2'\n      }, {\n        id: 'id-3',\n        title: '标题3'\n      }]\n    }; // 修改方法的 this 指向 \n\n    this.clickHandler1 = this.clickHandler1.bind(this);\n  }\n\n  render() {\n    // this - 使用 bind静态绑定this （不是点击的时候执行绑定）\n    // return <p onClick={this.clickHandler1}>\n    //     {this.state.name}\n    // </p>\n    // this - 使用静态方法\n    // return <p onClick={this.clickHandler2}>\n    //    {this.state.name}\n    // </p>\n    // event\n    return React.createElement(\"div\", {\n      onClick: this.clickHandler1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"http://baidu.com\",\n      onClick: this.clickHandler3.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"click me\")); // // 传递参数 - 用 bind(this, a, b)\n    // return <ul>{this.state.list.map((item, index) => {\n    //     return <li key={item.id} onClick={this.clickHandler4.bind(this, item.id, item.title)}>\n    //         index {index}; title {item.title}\n    //     </li>\n    // })}</ul>\n  }\n\n  clickHandler1() {\n    console.log('this...', this); // this 默认是 undefined\n\n    this.setState({\n      name: 'lisi'\n    });\n  } // 静态方法，this 指向当前实例 不推荐\n\n\n  // 传递参数\n  clickHandler4(id, title, event) {\n    console.log(id, title);\n    console.log('event', event); // 最后追加一个参数，即可接收 event\n  }\n\n}\n\nexport default EventDemo;","map":{"version":3,"sources":["/Users/xuanqiyan/Desktop/面试阶段/面试题/框架/react-code-demo/src/components/baseUse/EventDemo.js"],"names":["React","EventDemo","Component","constructor","props","clickHandler2","setState","name","clickHandler3","event","preventDefault","console","log","nativeEvent","__proto__","state","list","id","title","clickHandler1","bind","render","clickHandler4"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAwDnBC,aAxDmB,GAwDH,MAAM;AAClB,WAAKC,QAAL,CAAc;AACVC,QAAAA,IAAI,EAAE;AADI,OAAd;AAGH,KA5DkB;;AAAA,SA8DnBC,aA9DmB,GA8DFC,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACC,cAAN,GADuB,CACC;AACxB;AACA;AACA;AAEA;AACA;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,KAAK,CAACI,WAAN,CAAkBC,SAAlB,CAA4BX,WAAvE,EAEA;AAFA,QAGCQ,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAAK,CAACI,WAAjC,CAHD,CARuB,CAWuB;AAC9C;AACA;AAEA;AACA;AACA;AACA;AACH,KAjFkB;;AAEf,SAAKE,KAAL,GAAa;AACTR,MAAAA,IAAI,EAAE,UADG;AAETS,MAAAA,IAAI,EAAE,CACF;AACIC,QAAAA,EAAE,EAAE,MADR;AAEIC,QAAAA,KAAK,EAAE;AAFX,OADE,EAKF;AACID,QAAAA,EAAE,EAAE,MADR;AAEIC,QAAAA,KAAK,EAAE;AAFX,OALE,EASF;AACID,QAAAA,EAAE,EAAE,MADR;AAEIC,QAAAA,KAAK,EAAE;AAFX,OATE;AAFG,KAAb,CAFe,CAoBf;;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA,WACL;AAAK,MAAA,OAAO,EAAE,KAAKF,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAG,MAAA,IAAI,EAAC,kBAAR;AAA2B,MAAA,OAAO,EAAE,KAAKX,aAAL,CAAmBY,IAAnB,CAAwB,IAAxB,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,CADK,CAZK,CAmBL;AACA;AACA;AACA;AACA;AACA;AACH;;AACDD,EAAAA,aAAa,GAAG;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsB,IAAtB,EADY,CACgB;;AAC5B,SAAKN,QAAL,CAAc;AACVC,MAAAA,IAAI,EAAE;AADI,KAAd;AAGH,GAvDmC,CAwDpC;;;AA2BA;AACAe,EAAAA,aAAa,CAACL,EAAD,EAAKC,KAAL,EAAYT,KAAZ,EAAmB;AAC5BE,IAAAA,OAAO,CAACC,GAAR,CAAYK,EAAZ,EAAgBC,KAAhB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB,EAF4B,CAEA;AAC/B;;AAvFmC;;AA0FxC,eAAeR,SAAf","sourcesContent":["import React from 'react'\n\nclass EventDemo extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            name: 'zhangsan',\n            list: [\n                {\n                    id: 'id-1',\n                    title: '标题1'\n                },\n                {\n                    id: 'id-2',\n                    title: '标题2'\n                },\n                {\n                    id: 'id-3',\n                    title: '标题3'\n                }\n            ]\n        }\n\n        // 修改方法的 this 指向 \n        this.clickHandler1 = this.clickHandler1.bind(this)\n    }\n    render() {\n        // this - 使用 bind静态绑定this （不是点击的时候执行绑定）\n        // return <p onClick={this.clickHandler1}>\n        //     {this.state.name}\n        // </p>\n\n        // this - 使用静态方法\n        // return <p onClick={this.clickHandler2}>\n        //    {this.state.name}\n        // </p>\n\n        // event\n        return (\n\t\t\t<div onClick={this.clickHandler1}>\n\t\t\t\t<a href=\"http://baidu.com\" onClick={this.clickHandler3.bind(this)}>\n\t\t\t\t    click me\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t)\n        // // 传递参数 - 用 bind(this, a, b)\n        // return <ul>{this.state.list.map((item, index) => {\n        //     return <li key={item.id} onClick={this.clickHandler4.bind(this, item.id, item.title)}>\n        //         index {index}; title {item.title}\n        //     </li>\n        // })}</ul>\n    }\n    clickHandler1() {\n        console.log('this...',this) // this 默认是 undefined\n        this.setState({\n            name: 'lisi'\n        })\n    }\n    // 静态方法，this 指向当前实例 不推荐\n    clickHandler2 = () => {\n        this.setState({\n            name: 'lisi'\n        })\n    }\n    // 获取 event\n    clickHandler3 = (event) => {\n        event.preventDefault()  // 阻止默认行为\n        //event.stopPropagation() // 阻止冒泡\n        //console.log('target', event.target) // 事件在哪个元素上监听的，即当前元素触发\n        //console.log('current target', event.currentTarget) // 事件在哪个元素上触发的 ，假象！！！\n\n        // 注意:event 其实是 React 封装的, 可以看 __proto__.constructor 是 SyntheticEvent 组合事件\n        //console.log('event', event) // 不是原生的 Event ，原生的 MouseEvent\n        console.log('event.__proto__.constructor', event.nativeEvent.__proto__.constructor)\n\n        // 原生 event 如下: 其 __proto__.constructor 是 MouseEvent\n       / console.log('nativeEvent', event.nativeEvent)// 原始的event对象\n        // console.log('nativeEvent target', event.nativeEvent.target)  //绑定事件的元素\n        // console.log('nativeEvent current target', event.nativeEvent.currentTarget) //触发事件的元素 指向 document ！！！\n\n        // 1. event 是 SyntheticEvent ，模拟出来 DOM 事件所有能力\n        // 2. event.nativeEvent 是原生事件对象\n        // 3. 所有的事件，都被挂载到 document 上\n        // 4. 和 DOM 事件不一样，和 Vue 事件也不一样\n    }\n    // 传递参数\n    clickHandler4(id, title, event) {\n        console.log(id, title)\n        console.log('event', event) // 最后追加一个参数，即可接收 event\n    }\n}\n\nexport default EventDemo\n"]},"metadata":{},"sourceType":"module"}
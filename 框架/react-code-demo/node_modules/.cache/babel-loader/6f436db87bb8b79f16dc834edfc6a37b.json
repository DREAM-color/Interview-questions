{"ast":null,"code":"var _jsxFileName = \"/Users/xuanqiyan/Desktop/\\u9762\\u8BD5\\u9636\\u6BB5/\\u9762\\u8BD5\\u9898/\\u6846\\u67B6/react-code-demo/src/components/advancedUse/SCUDemo2.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTitleChange = e => {\n      this.setState({\n        title: e.target.value\n      });\n    };\n\n    this.onSubmit = () => {\n      const submitTitle = this.props.submitTitle;\n      submitTitle(this.state.title);\n      this.setState({\n        title: ''\n      });\n    };\n\n    this.state = {\n      title: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: this.state.title,\n      onChange: this.onTitleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"\\u63D0\\u4EA4\"));\n  }\n\n} // props 类型检查\n\n\nInput.propTypes = {\n  submitTitle: PropTypes.func.isRequired\n};\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const list = this.props.list;\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, list.map((item, index) => {\n      return React.createElement(\"li\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, item.title));\n    }));\n  }\n\n  componentDidUpdate() {\n    console.log(' did update');\n  } // 注意： shouldComponentUpdate 一定要配合数据的不可变原则\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // _.isEqual（不仅比较指针而且对内部的数据逐层比较） 做对象或者数组的深度比较（一次性递归到底，性能比较低）\n    //if (nextProps.list===this.props.list) { //  比较指针\n    if (_.isEqual(nextProps.list, this.props.list)) {\n      // 相等，则不重复渲染\n      return false;\n    }\n\n    return true; // 不相等，则渲染\n  }\n\n} // props 类型检查\n\n\nList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nclass TodoListDemo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmitTitle = title => {\n      // 正确的用法 符合不可变原则\n      // this.setState({\n      //     list: this.state.list.concat({\n      //         id: `id-${Date.now()}`,\n      //         title\n      //     })\n      // })\n      // 为了演示 SCU ，故意写的错误用法   不符合不可变原则\n      this.state.list.push({\n        id: `id-${Date.now()}`,\n        title\n      });\n      this.setState({\n        list: this.state.list\n      });\n    };\n\n    this.state = {\n      list: [{\n        id: 'id-1',\n        title: '标题1'\n      }, {\n        id: 'id-2',\n        title: '标题2'\n      }, {\n        id: 'id-3',\n        title: '标题3'\n      }]\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Input, {\n      submitTitle: this.onSubmitTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(List, {\n      list: this.state.list,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TodoListDemo;\n/*\n\tscu优化\n\t\t1.react 其实并没有做scu 数据没改变也要重新渲染\n\t\t2.我们需要做scu优化 ，判断条件看state和props有没有改变 ，\n\t\t\t改变了return true 重新渲染\n\t\t\t没改变retuturn false 不需要重新渲染\n\t\t3.在判断比较的时候可以考虑对属性\n\t\t\t做深比较（_.isEqual）（需要第一次递归，性能不是太好）\n\t\t\t做浅比较 (React.PureComponent) 推荐(满足大部分业务)\n\t\t4. 一旦做了scu优化，那必须准守 属性的不可变值原则\t\n\t\t\timmutable.js 插件帮你实现使用不可变原则设置数据\n\t\t\n*/","map":{"version":3,"sources":["/Users/xuanqiyan/Desktop/面试阶段/面试题/框架/react-code-demo/src/components/advancedUse/SCUDemo2.js"],"names":["React","PropTypes","_","Input","Component","constructor","props","onTitleChange","e","setState","title","target","value","onSubmit","submitTitle","state","render","propTypes","func","isRequired","List","list","map","item","index","id","componentDidUpdate","console","log","shouldComponentUpdate","nextProps","nextState","isEqual","arrayOf","object","TodoListDemo","onSubmitTitle","push","Date","now"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nclass Input extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: ''\n        }\n    }\n    render() {\n        return <div>\n            <input value={this.state.title} onChange={this.onTitleChange}/>\n            <button onClick={this.onSubmit}>提交</button>\n        </div>\n    }\n    onTitleChange = (e) => {\n        this.setState({\n            title: e.target.value\n        })\n    }\n    onSubmit = () => {\n        const { submitTitle } = this.props\n        submitTitle(this.state.title)\n\n        this.setState({\n            title: ''\n        })\n    }\n}\n// props 类型检查\nInput.propTypes = {\n    submitTitle: PropTypes.func.isRequired\n}\n\nclass List extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        const { list } = this.props\n\n        return <ul>{list.map((item, index) => {\n            return <li key={item.id}>\n                <span>{item.title}</span>\n            </li>\n        })}</ul>\n    }\n\tcomponentDidUpdate() {\n\t    console.log(' did update')\n\t}\n    // 注意： shouldComponentUpdate 一定要配合数据的不可变原则\n    shouldComponentUpdate(nextProps, nextState) {\n        // _.isEqual（不仅比较指针而且对内部的数据逐层比较） 做对象或者数组的深度比较（一次性递归到底，性能比较低）\n        //if (nextProps.list===this.props.list) { //  比较指针\n\t\tif(_.isEqual(nextProps.list,this.props.list)){\n            // 相等，则不重复渲染\n            return false\n        }\n        return true // 不相等，则渲染\n    }\n}\n// props 类型检查\nList.propTypes = {\n    list: PropTypes.arrayOf(PropTypes.object).isRequired\n}\n\nclass TodoListDemo extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            list: [\n                {\n                    id: 'id-1',\n                    title: '标题1'\n                },\n                {\n                    id: 'id-2',\n                    title: '标题2'\n                },\n                {\n                    id: 'id-3',\n                    title: '标题3'\n                }\n            ]\n        }\n    }\n    render() {\n        return <div>\n            <Input submitTitle={this.onSubmitTitle}/>\n            <List list={this.state.list}/>\n        </div>\n    }\n    onSubmitTitle = (title) => {\n        // 正确的用法 符合不可变原则\n        // this.setState({\n        //     list: this.state.list.concat({\n        //         id: `id-${Date.now()}`,\n        //         title\n        //     })\n        // })\n\n        // 为了演示 SCU ，故意写的错误用法   不符合不可变原则\n        this.state.list.push({\n            id: `id-${Date.now()}`,\n            title\n        })\n        this.setState({\n            list: this.state.list\n        })\n    }\n}\n\nexport default TodoListDemo\n\n/*\n\tscu优化\n\t\t1.react 其实并没有做scu 数据没改变也要重新渲染\n\t\t2.我们需要做scu优化 ，判断条件看state和props有没有改变 ，\n\t\t\t改变了return true 重新渲染\n\t\t\t没改变retuturn false 不需要重新渲染\n\t\t3.在判断比较的时候可以考虑对属性\n\t\t\t做深比较（_.isEqual）（需要第一次递归，性能不是太好）\n\t\t\t做浅比较 (React.PureComponent) 推荐(满足大部分业务)\n\t\t4. 一旦做了scu优化，那必须准守 属性的不可变值原则\t\n\t\t\timmutable.js 插件帮你实现使用不可变原则设置数据\n\t\t\n*/\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/xuanqiyan/Desktop/\\u9762\\u8BD5\\u9636\\u6BB5/\\u9762\\u8BD5\\u9898/\\u6846\\u67B6/react-code-demo/src/components/baseUse/StateDemo.js\";\nimport React from 'react'; // 函数组件（后面会讲），默认没有 state\n\nclass StateDemo extends React.Component {\n  constructor(props) {\n    super(props); // 第一 state 要在构造函数中定义\n\n    this.increase = () => {\n      //第二 不要直接修改 state ，使用不可变值 操作数据的时候不能直接在原始数据上做修改，不管对象还是数据操作都应该操作副本 ----------------------------\n      // 错误 违背了react 对 state属性使用不可变值的原则\n      // this.state.count++ \n      // this.setState({\n      //     count: this.state.count \n      // })\n      // 正确 准守了react 对state 属性使用不可变值的原则\n      // this.setState({\n      // \tcount:this.state.count+1\n      // })\n      // 操作数组、对象的的常用形式\n      // 第三 setState 可能是异步更新（有可能是同步更新） ----------------------------\n      this.setState({\n        count: this.state.count + 1\n      });\n      console.log('count', this.state.count); // 异步的，拿不到最新值\n      // setTimeout 中 setState 是同步的\n      // setTimeout(() => {\n      //     this.setState({\n      //         count: this.state.count + 1\n      //     })\n      //     console.log('count in setTimeout', this.state.count)\n      // }, 0)\n      // 自己定义的 DOM 事件，setState 是同步的\n      // 第四，state 异步更新的话，更新前会被合并 ----------------------------\n      // // 传入对象，会被合并。执行结果只一次 +1\n      // this.setState({\n      //     count: this.state.count + 1\n      // })\n      // this.setState({\n      //     count: this.state.count + 1\n      // })\n      // this.setState({\n      //     count: this.state.count + 1\n      // })\n      // 传入函数，不会被合并。执行结果是 +3\n      // this.setState((prevState, props) => {\n      //     return {\n      //         count: prevState.count + 1\n      //     }\n      // })\n      // this.setState((prevState, props) => {\n      //     return {\n      //         count: prevState.count + 1\n      //     }\n      // })\n      // this.setState((prevState, props) => {\n      //     return {\n      //         count: prevState.count + 1\n      //     }\n      // })\n    };\n\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, this.state.count), React.createElement(\"button\", {\n      onClick: this.increase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"\\u7D2F\\u52A0\"));\n  } // bodyClickHandler = () => {\n  //     this.setState({\n  //         count: this.state.count + 1\n  //     })\n  //     console.log('count in body event', this.state.count)\n  // }\n  // componentDidMount() {\n  //     // 自己定义的 DOM 事件，setState 是同步的\n  //     document.body.addEventListener('click', this.bodyClickHandler)\n  // }\n  // componentWillUnmount() {\n  //     // 及时销毁自定义 DOM 事件\n  //     document.body.removeEventListener('click', this.bodyClickHandler)\n  //     // clearTimeout\n  // }\n\n\n}\n\nexport default StateDemo; // -------------------------- 我是分割线 -----------------------------\n// // 不可变值（函数式编程，纯函数） - 数组\n// const list5Copy = [....this.state.list5]\n// list5Copy.splice(2, 0, 'a') // 中间插入/删除\n// this.setState({\n//     list1: this.state.list1.concat(100), // 追加\n//     list2: [...this.state.list2, 100], // 追加\n//     list3: this.state.list3.slice(0, 3), // 截取\n//     list4: this.state.list4.filter(item => item > 100), // 筛选\n//     list5: list5Copy ,// 其他操作\n// })\n// //  注意不能直接对 this.state.list 进行 push pop splice 等，这样违反不可变值\n// // // 不可变值 - 对象\n// this.setState({\n//     obj1: Object.assign({}, this.state.obj1, {a: 100}),\n//     obj2: {...this.state.obj2, a: 100}\n// })\n// // 注意，不能直接对 this.state.obj 进行属性设置，这样违反不可变值","map":{"version":3,"sources":["/Users/xuanqiyan/Desktop/面试阶段/面试题/框架/react-code-demo/src/components/baseUse/StateDemo.js"],"names":["React","StateDemo","Component","constructor","props","increase","setState","count","state","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;;AAHe,SAcnBC,QAdmB,GAcR,MAAM;AACb;AAEN;AACM;AACA;AACA;AACA;AAEN;AACA;AACA;AACA;AAEM;AAEA;AAEA,WAAKC,QAAL,CAAc;AACVC,QAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD,KAAX,GAAmB;AADhB,OAAd;AAGAE,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKF,KAAL,CAAWD,KAAhC,EArBa,CAqB0B;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KA5EkB;;AAIf,SAAKC,KAAL,GAAa;AACTD,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AACDI,EAAAA,MAAM,GAAG;AACL,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKH,KAAL,CAAWD,KAAf,CADG,EAEH;AAAQ,MAAA,OAAO,EAAE,KAAKF,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFG,CAAP;AAIH,GAdmC,CA8EpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA5FoC;;AA+FxC,eAAeJ,SAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\n\n// 函数组件（后面会讲），默认没有 state\nclass StateDemo extends React.Component {\n    constructor(props) {\n        super(props)\n\n        // 第一 state 要在构造函数中定义\n        this.state = {\n            count: 0\n        }\n    }\n    render() {\n        return <div>\n            <p>{this.state.count}</p>\n            <button onClick={this.increase}>累加</button>\n        </div>\n    }\n    increase = () => {\n        //第二 不要直接修改 state ，使用不可变值 操作数据的时候不能直接在原始数据上做修改，不管对象还是数据操作都应该操作副本 ----------------------------\n\t\t\n\t\t// 错误 违背了react 对 state属性使用不可变值的原则\n        // this.state.count++ \n        // this.setState({\n        //     count: this.state.count \n        // })\n\t\t\n\t\t// 正确 准守了react 对state 属性使用不可变值的原则\n\t\t// this.setState({\n\t\t// \tcount:this.state.count+1\n\t\t// })\n\t\t\n        // 操作数组、对象的的常用形式\n\n        // 第三 setState 可能是异步更新（有可能是同步更新） ----------------------------\n        \n        this.setState({\n            count: this.state.count + 1\n        })\n        console.log('count', this.state.count) // 异步的，拿不到最新值\n\n        // setTimeout 中 setState 是同步的\n        // setTimeout(() => {\n        //     this.setState({\n        //         count: this.state.count + 1\n        //     })\n        //     console.log('count in setTimeout', this.state.count)\n        // }, 0)\n\n        // 自己定义的 DOM 事件，setState 是同步的\n\n        // 第四，state 异步更新的话，更新前会被合并 ----------------------------\n        \n        // // 传入对象，会被合并。执行结果只一次 +1\n        // this.setState({\n        //     count: this.state.count + 1\n        // })\n        // this.setState({\n        //     count: this.state.count + 1\n        // })\n        // this.setState({\n        //     count: this.state.count + 1\n        // })\n        \n        // 传入函数，不会被合并。执行结果是 +3\n        // this.setState((prevState, props) => {\n        //     return {\n        //         count: prevState.count + 1\n        //     }\n        // })\n        // this.setState((prevState, props) => {\n        //     return {\n        //         count: prevState.count + 1\n        //     }\n        // })\n        // this.setState((prevState, props) => {\n        //     return {\n        //         count: prevState.count + 1\n        //     }\n        // })\n    }\n    // bodyClickHandler = () => {\n    //     this.setState({\n    //         count: this.state.count + 1\n    //     })\n    //     console.log('count in body event', this.state.count)\n    // }\n    // componentDidMount() {\n    //     // 自己定义的 DOM 事件，setState 是同步的\n    //     document.body.addEventListener('click', this.bodyClickHandler)\n    // }\n    // componentWillUnmount() {\n    //     // 及时销毁自定义 DOM 事件\n    //     document.body.removeEventListener('click', this.bodyClickHandler)\n    //     // clearTimeout\n    // }\n}\n\nexport default StateDemo\n\n// -------------------------- 我是分割线 -----------------------------\n\n// // 不可变值（函数式编程，纯函数） - 数组\n// const list5Copy = [....this.state.list5]\n// list5Copy.splice(2, 0, 'a') // 中间插入/删除\n// this.setState({\n//     list1: this.state.list1.concat(100), // 追加\n//     list2: [...this.state.list2, 100], // 追加\n//     list3: this.state.list3.slice(0, 3), // 截取\n//     list4: this.state.list4.filter(item => item > 100), // 筛选\n//     list5: list5Copy ,// 其他操作\n\t\n// })\n\n// //  注意不能直接对 this.state.list 进行 push pop splice 等，这样违反不可变值\n\n// // // 不可变值 - 对象\n// this.setState({\n//     obj1: Object.assign({}, this.state.obj1, {a: 100}),\n//     obj2: {...this.state.obj2, a: 100}\n// })\n// // 注意，不能直接对 this.state.obj 进行属性设置，这样违反不可变值\n"]},"metadata":{},"sourceType":"module"}
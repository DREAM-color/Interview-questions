{"ast":null,"code":"var _jsxFileName = \"/Users/xuanqiyan/Desktop/\\u9762\\u8BD5\\u9636\\u6BB5/\\u9762\\u8BD5\\u9898/\\u6846\\u67B6/react-code-demo/src/components/baseUse/PropsDemo.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: 'xxxxxxxxxx'\n    };\n  }\n\n  render() {\n    // vue双向绑定 v-model react 双向绑定  (受控组件)\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: this.state.title,\n      onChange: this.onTitleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.onSubmit.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"\\u63D0\\u4EA4\"));\n  }\n\n  onTitleChange(e) {\n    this.setState({\n      title: e.target.value\n    });\n  }\n\n  onSubmit() {\n    //react 父子组件传值\n    const _this$props = this.props,\n          submitTitle = _this$props.submitTitle,\n          aa = _this$props.aa;\n    submitTitle(this.state.title); // 'abc'\n\n    this.setState({\n      title: '' //清空title\n\n    });\n  }\n\n} // props 类型检查\n\n\nInput.propTypes = {\n  submitTitle: PropTypes.func.isRequired\n};\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const list = this.props.list;\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, list.map((item, index) => {\n      return React.createElement(\"li\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, item.title));\n    }));\n  }\n\n} // props 类型检查\n\n\nList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object, PropTypes.array).isRequired\n};\n\nclass Footer extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.props.text, this.props.length);\n  }\n\n  componentDidUpdate() {\n    console.log('footer did update');\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.text !== this.props.text || nextProps.length !== this.props.length) {\n      return true; // 可以渲染\n    }\n\n    return false; // 不重复渲染\n  } // React 默认：父组件有更新，子组件则无条件也更新！！！\n  // 性能优化对于 React 更加重要！\n  // SCU 一定要每次都用吗？—— 需要的时候才优化\n\n\n}\n\nclass TodoListDemo extends React.Component {\n  constructor(props) {\n    super(props); // 状态（数据）提升\n\n    this.onSubmitTitle = title => {\n      this.setState({\n        list: this.state.list.concat({\n          id: `id-${Date.now()}`,\n          title\n        })\n      });\n    };\n\n    this.state = {\n      list: [{\n        id: 'id-1',\n        title: '标题1'\n      }, {\n        id: 'id-2',\n        title: '标题2'\n      }, {\n        id: 'id-3',\n        title: '标题3'\n      }],\n      footerInfo: '底部文字'\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Input, {\n      submitTitle: this.onSubmitTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(List, {\n      list: this.state.list,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      text: this.state.footerInfo,\n      length: this.state.list.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TodoListDemo;","map":{"version":3,"sources":["/Users/xuanqiyan/Desktop/面试阶段/面试题/框架/react-code-demo/src/components/baseUse/PropsDemo.js"],"names":["React","PropTypes","Input","Component","constructor","props","state","title","render","onTitleChange","bind","onSubmit","e","setState","target","value","submitTitle","aa","propTypes","func","isRequired","List","list","map","item","index","id","arrayOf","object","array","Footer","text","length","componentDidUpdate","console","log","shouldComponentUpdate","nextProps","nextState","TodoListDemo","onSubmitTitle","concat","Date","now","footerInfo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass Input extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: 'xxxxxxxxxx'\n        }\n    }\n    render() {\n\t\t// vue双向绑定 v-model react 双向绑定  (受控组件)\n        return <div>\n            <input value={this.state.title} onChange={this.onTitleChange.bind(this)}/>\n            <button onClick={this.onSubmit.bind(this)}>提交</button>\n        </div>\n    }\n    onTitleChange (e) {\n        this.setState({\n            title: e.target.value\n        })\n    }\n    onSubmit() {\n\t\t//react 父子组件传值\n        const { submitTitle,aa } = this.props\n        submitTitle(this.state.title) // 'abc'\n\n        this.setState({\n            title: ''//清空title\n        })\n    }\n}\n// props 类型检查\nInput.propTypes = {\n    submitTitle: PropTypes.func.isRequired\n}\n\nclass List extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        const { list } = this.props\n\n        return <ul>\n\t\t\t{\n\t\t\t\tlist.map((item, index) => {\n\t\t\t\t\treturn <li key={item.id}>\n\t\t\t\t\t\t<span>{item.title}</span>\n\t\t\t\t\t</li>\n\t\t\t\t})\n\t\t\t}\t\n\t\t</ul>\n    }\n}\n// props 类型检查\nList.propTypes = {\n    list: PropTypes.arrayOf(PropTypes.object,PropTypes.array).isRequired\n}\n\nclass Footer extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return <p>\n            {this.props.text}\n            {this.props.length}\n        </p>\n    }\n    componentDidUpdate() {\n        console.log('footer did update')\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.text !== this.props.text\n            || nextProps.length !== this.props.length) {\n            return true // 可以渲染\n        }\n        return false // 不重复渲染\n    }\n\n    // React 默认：父组件有更新，子组件则无条件也更新！！！\n    // 性能优化对于 React 更加重要！\n    // SCU 一定要每次都用吗？—— 需要的时候才优化\n}\n\nclass TodoListDemo extends React.Component {\n    constructor(props) {\n        super(props)\n        // 状态（数据）提升\n        this.state = {\n            list: [\n                {\n                    id: 'id-1',\n                    title: '标题1'\n                },\n                {\n                    id: 'id-2',\n                    title: '标题2'\n                },\n                {\n                    id: 'id-3',\n                    title: '标题3'\n                }\n            ],\n            footerInfo: '底部文字'\n        }\n    }\n    render() {\n        return <div>\n            <Input  submitTitle={this.onSubmitTitle}/>\n            <List list={this.state.list}/>\n            <Footer text={this.state.footerInfo} length={this.state.list.length}/>\n        </div>\n    }\n    onSubmitTitle = (title) => {\n        this.setState({\n            list: this.state.list.concat({\n                id: `id-${Date.now()}`,\n                title\n            })\n        })\n    }\n}\n\nexport default TodoListDemo\n"]},"metadata":{},"sourceType":"module"}
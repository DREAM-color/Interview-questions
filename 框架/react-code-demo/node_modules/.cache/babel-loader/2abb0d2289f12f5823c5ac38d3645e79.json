{"ast":null,"code":"var _jsxFileName = \"/Users/xuanqiyan/Desktop/\\u9762\\u8BD5\\u9636\\u6BB5/\\u9762\\u8BD5\\u9898/\\u6846\\u67B6/react-code-demo/src/components/advancedUse/LazyDemo.js\";\nimport React, { lazy, Suspense } from 'react';\nconst ContextDemo = lazy(() => {\n  return () => import('./ContextDemo');\n});\n/*\n\nlazy 接受一个函数作为参数，函数内部使用 import() 方法异步加载组件，加载的结果返回。\nlazy 会返回一个新的 React 组件，我们可以直接在 Suspense 标签内使用，这样组件就会在匹配的时候才加载。\nSuspense 组件的 fallback 属性是必填属性，它接受一个组件，在内部的异步组件还未加载完成时显示，\n所以我们通常传递一个 Loading 组件给它，如果没有传递的话，就会报错\n*/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"\\u5F15\\u5165\\u4E00\\u4E2A\\u52A8\\u6001\\u7EC4\\u4EF6\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), React.createElement(Suspense, {\n      fallback: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Loading...\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(ContextDemo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }))); // 1. 强制刷新，可看到 loading （看不到就限制一下 chrome 网速）\n    // 2. 看 network 的 js 加载\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/xuanqiyan/Desktop/面试阶段/面试题/框架/react-code-demo/src/components/advancedUse/LazyDemo.js"],"names":["React","lazy","Suspense","ContextDemo","App","Component","constructor","props","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,IAAf,EAAqBC,QAArB,QAAqC,OAArC;AAEA,MAAMC,WAAW,GAAGF,IAAI,CAAC,MAAI;AAE5B,SAAO,MAAM,OAAO,eAAP,CAAb;AAEA,CAJuB,CAAxB;AAKA;;;;;;;;AAQA,MAAMG,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DADG,EAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFG,EAGH,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAHG,CAAP,CADK,CASL;AACA;AACH;;AAf6B;;AAkBlC,eAAeJ,GAAf","sourcesContent":["import React,{ lazy, Suspense } from 'react'\n\nconst ContextDemo = lazy(()=>{\n\t\n\treturn () => import('./ContextDemo')\n\t\n})\n/*\n\nlazy 接受一个函数作为参数，函数内部使用 import() 方法异步加载组件，加载的结果返回。\nlazy 会返回一个新的 React 组件，我们可以直接在 Suspense 标签内使用，这样组件就会在匹配的时候才加载。\nSuspense 组件的 fallback 属性是必填属性，它接受一个组件，在内部的异步组件还未加载完成时显示，\n所以我们通常传递一个 Loading 组件给它，如果没有传递的话，就会报错\n*/\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return <div>\n            <p>引入一个动态组件</p>\n            <hr />\n            <Suspense fallback={<div>Loading...</div>}>\n                <ContextDemo/>\n            </Suspense>\n        </div>\n\n        // 1. 强制刷新，可看到 loading （看不到就限制一下 chrome 网速）\n        // 2. 看 network 的 js 加载\n    }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}